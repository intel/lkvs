#This file collects the basic test cases for IntelÂ® Processor Trace feature

# Verify to filter MTC (Mini Time Counter) and TSC (Time-Stamp Counter) package
perf_tests.sh -t fp
# Verify control flow packages when branch disable
perf_tests.sh -t disablebranch
# Verify control flow packages when branch and PT both disable
perf_tests.sh -t pt
# Verify power event trace
perf_tests.sh -t pwr_evt
# Verify power event trace when branch is disabled
perf_tests.sh -t pwr_evt_branch
# Verify if power event trace with itrace information is aligned
perf_tests.sh -t pwr_evt_itrace
# Verify PT generated trace packages in user space
perf_tests.sh -t user
# Verify PT generated trace packages in kernel space
perf_tests.sh -t kernel
# Verify if the CYC (cycle count) package is supported and detected
perf_tests.sh -t cyc
# Verify if the CYC (cycle count) will be disabled
# if MTC(mini time counter) is disabled in perf
perf_tests.sh -t mtc
# Verify if the CYC package is disabled by default
perf_tests.sh -t time_full
# Record and filter PT's branch events, cycles, and instructions
perf_tests.sh -t pebs
# Verify Intel PT's last branch recorded stack information
perf_tests.sh -t lbr
# Verify Intel PT's multiple table of physical address entries
perf_tests.sh -t mtopa
# Verify Intel PT's auxiliary samples specified to the branch misses events
perf_tests.sh -t sample
# Verify Intel PT's user events by perf tool with multiple cycles
perf_tests.sh -t user_m
# Verify Intel PT's kernel events by perf tool with multiple cycles
perf_tests.sh -t kernel_m
# Verify the miss frequency of specified events
perf_tests.sh -t miss_frequency
# Verify the virtual LBR (Last Branch Record)
perf_tests.sh -t virtual_lbr
# Verify if there is data lost during perf record
perf_tests.sh -t lost_data
# Verify if not get TNT(Taken/Not-taken) when TNT is disabled
perf_tests.sh -t notnt
# Verify if the event trace is supported and detected
perf_tests.sh -t event_trace
# Verify if the tracestop is supported and detected
perf_tests.sh -t trace_stop
# Verify the trace filter with main count
perf_tests.sh -t trace_filter
# Verify the kernel level trace filter with _sched samples
perf_tests.sh -t trace_filter_kernel
# Verify if trace filter with __sched for kernel is supported and detected
perf_tests.sh -t trace_filter_kernel_cpu

# Below cases are designed with C program
# Disable branch and check if TIP/FUP/TNT packages are disabled
# TIP: (Target IP Package)
# FUP: (Flow Update Package)
# TNT: (Take/Not-taken)
branch

# User mode trace check for current privilege level
# CPL: Current Privilege Level
cpl 1

# Kernel mode trace check for current privilege level
cpl 2

# Verify if the psb package is available
# PSB: Package Stream Boundary
psb

# Check if the reserved bit cannot be set.
negative_test

# Doing the full trace check with non root user
nonroot_test 1

# Doing snapshot trace check with non root user
nonroot_test 2

