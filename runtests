#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-2.0-only
# Copyright (c) 2022 Intel Corporation.

source .env

START_TIME=""
SUMMRY_LOG=""

usage() {
  cat << _EOF
Usage: ${0##*/} [-f CMDFILES] [-c CMDLINE] [-o LOGFILE]
  -f CMDFILES   execute user defined list of tests in files separated by ','
  -c CMDLINE    execute test case
  -o LOGFILE    redirect output of tests to file

Examples:
  ./runtests -f cet/tests
  ./runtests -f cet/tests -o cet_tests.log
  ./runtests -c ./cet/quick_test -o cet_quick_test.log
_EOF
}

err() {
  echo -e "\n$*" >&2
  exit 1
}

runtest() {
  local cmdline=$1
  local logfile=$2
  local subfolder=$3
  local start
  local stop
  local duration
  local code
  local result
  local case_result=""

  if [[ -n "$logfile" ]]; then
    echo "<<<test start - '$cmdline'>>" | tee -a "$logfile"
  else
    echo "<<<test start - '$cmdline'>>"
  fi

  if [[ -z "$subfolder" ]]; then
    echo "LKVS tests: $cmdline" >> /dev/kmsg
  else
    echo "LKVS tests: ${subfolder}/${cmdline}" >> /dev/kmsg
  fi

  set -o pipefail
  start=$(date +%s.%3N)

  if [[ -n "$logfile" ]]; then
    eval "$cmdline |& tee -a $logfile" &
  else
    eval "$cmdline" &
  fi

  wait $!
  code=$?

  stop=$(date +%s.%3N)
  duration=$(printf '%.3f' "$(bc <<< "$stop-$start")")
  set +o pipefail

  case $code in
    0)
      result="PASS"
      ;;
    2)
      result="BLOCK"
      ;;
    32)
      result="NA"
      ;;
    *)
      result="FAIL"
      ;;
  esac

  if [[ -n "$logfile" ]]; then
    echo -e "<<<test end, result: $result, duration: $duration>>\n" | tee -a "$logfile"
  else
    echo -e "<<<test end, result: $result, duration: ${duration}s>>\n"
  fi
  case_result=$(printf "%-76s%-11s%-12s%-8s" "$cmdline" "$result" "$code" "${duration}s")
  echo "$case_result" >> "$SUMMRY_LOG"
}

runcmdfile() {
  local cmdfile=$1
  local logfile=$2
  local subfolder=""
  local file_type=""

  if [[ "$cmdfile" == *"/"* ]]; then
    subfolder=${cmdfile%/*}
  else
    echo "cmdfile:$cmdfile(no '/') is not in a subfolder!"
  fi

  while read -r line; do
    if grep -Eq "^#.*" <<< "$line" || grep -Eq "^$" <<< "$line"; then
      continue
    fi

    runtest "$line" "$logfile" "$subfolder"
  done < "$cmdfile"
}

: LOGFILE=""
: CMDFILES=""
: CMDLINE=""

while getopts ":o:f:c:h" opt; do
  case "$opt" in
    o)
      LOGFILE=$OPTARG
      ;;
    f)
      CMDFILES=$OPTARG
      ;;
    c)
      CMDLINE=$OPTARG
      ;;
    h)
      usage
      exit 0
      ;;
    \?)
      usage
      err "Invalid option: -$OPTARG"
      ;;
    :)
      usage
      err "Option -$OPTARG requires an argument."
      ;;
  esac
done

if [[ -z "$CMDFILES" ]] && [[ -z "$CMDLINE" ]]; then
  usage
  err "no test to run!"
fi

START_TIME="$(date +%Y-%m-%d_%H-%M-%S)"
SUMMRY_LOG="/tmp/lkvs_${START_TIME}_summary.log"
echo "Test Start Time: $START_TIME" > "$SUMMRY_LOG"
{
  echo "--------------------------------------------------------"
  printf "%-76s%-11s%-12s%-8s\n" "Testcase" "Result" "Exit Value" "Duration"
  printf "%-76s%-11s%-12s%-8s\n" "--------" "------" "----------" "--------"
} >> "$SUMMRY_LOG"

for cmdfile in $(tr "," " " <<< "$CMDFILES"); do
  if [[ ! -f "$cmdfile" ]]; then
    echo "WARNING: $cmdfile not found!"
    continue
  fi

  [[ $(which file) ]] && {
    file_type=""
    file_type=$(file "$cmdfile")
    [[ "$file_type" == *"text"* ]] || {
      echo "WARNING: -f $cmdfile is not a text type file, it's real type:|$file_type|"
      echo "Please choose the correct tests file."
      usage
      continue
    }
  }

  runcmdfile "$cmdfile" "$LOGFILE"
done

if [[ -n "$CMDLINE" ]]; then
  runtest "$CMDLINE" "$LOGFILE"
fi

# Add the following print for the end of the case summary.
echo "--------------------------------------------------------" >> "$SUMMRY_LOG"

[[ -z "$LOGFILE" ]] || cat "$SUMMRY_LOG" >> "$LOGFILE"
cat "$SUMMRY_LOG"
