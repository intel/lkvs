#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-2.0-only
# Copyright (c) 2022 Intel Corporation.

source .env

readonly PASS_CODE=0
readonly BLOCK_CODE=2
readonly SKIP_CODE=4
readonly NA_CODE=32

START_TIME=""
SUMMRY_LOG=""
TESTS_CLIENT="tests-client"
TESTS_SERVER="tests-server"
TEST_FILES=""
SUB_FOLDERS=""
TEST_LIST_FILE="/tmp/tests"
OLD_IFS=""

# For dependence check parameters, set skip for unknow staus as default
export HW_DEP="$SKIP_CODE"
export KERNEL_DEP="$SKIP_CODE"
export OTHER_DEP="$SKIP_CODE"
export OTHER_WARN="$SKIP_CODE"

usage() {
  cat << _EOF
Usage: ${0##*/} [-f CMDFILES] [-c CMDLINE] [-o LOGFILE]
  -f CMDFILES   execute user defined list of tests in files separated by ','
  -d DEPENDENCE_FILE check dependence for specified feature tests
  -c CMDLINE    execute test case
  -o LOGFILE    redirect output of tests to file

Examples:
  ./runtests -f cet/tests
  ./runtests -f cet/tests -o cet_tests.log
  ./runtests -f tests-client  // exeucte tests-client/tests for all subfolders
  ./runtests -f tests-server  // exeucte tests-server/tests for all subfolders
  ./runtests -c ./cet/quick_test -o cet_quick_test.log
  ./runtests -d cet/tests     // check cet dependence
  ./runtests -d tests-server  // check tests-server/tests for all subfolders dependence
_EOF
}

append_log() {
  local info=$1
  local log_file=$2

  if [[ -z "$log_file" ]]; then
    echo -e "$info"
  else
    echo -e "$info" | tee -a "$log_file"
  fi
}

err() {
  echo -e "\n$*" >&2
  exit 1
}

runtest() {
  local cmdline=$1
  local logfile=$2
  local subfolder=$3
  local start
  local stop
  local duration
  local code
  local result
  local case_result=""

  append_log "<<<test start - '$cmdline'>>" "$logfile"

  if [[ -z "$subfolder" ]]; then
    echo "LKVS tests: $cmdline" >> /dev/kmsg
  else
    echo "LKVS tests: ${subfolder}/${cmdline}" >> /dev/kmsg
  fi

  set -o pipefail
  start=$(date +%s.%3N)

  if [[ -n "$logfile" ]]; then
    eval "$cmdline |& tee -a $logfile" &
  else
    eval "$cmdline" &
  fi

  wait $!
  code=$?

  stop=$(date +%s.%3N)
  duration=$(printf '%.3f' "$(bc <<< "$stop-$start")")
  set +o pipefail

  case $code in
    "$PASS_CODE")
      result="PASS"
      ;;
    "$BLOCK_CODE")
      result="BLOCK"
      ;;
    "$NA_CODE")
      result="NA"
      ;;
    *)
      result="FAIL"
      ;;
  esac

  append_log "<<<test end, result: $result, duration: ${duration}s>>\n" "$logfile"
  case_result=$(printf "[RESULT]%-68s%-11s%-12s%-8s" "[$cmdline]" " [$result]" "[$code]" "[${duration}s]")
  echo "$case_result" >> "$SUMMRY_LOG"
}

runcmdfile() {
  local cmdfile=$1
  local logfile=$2
  local subfolder=""
  local file_type=""
  local lines=""
  local line=""

  if [[ "$cmdfile" == *"/"* ]]; then
    subfolder=${cmdfile%/*}
  else
    append_log "cmdfile:$cmdfile(no '/') is not in a subfolder!" "$logfile"
  fi

  grep -v "^#.*" "$cmdfile" | grep -v "^$" > "$TEST_LIST_FILE"
  lines=$(cat $TEST_LIST_FILE)
  OLD_IFS="$IFS"
  IFS=$'\n'
  for line in $lines; do
    runtest "$line" "$logfile" "$subfolder"
  done
  IFS="$OLD_IFS"
}

prepare_files_list() {
  local test_file_type=$1
  local sub_folder=""

  for sub_folder in $SUB_FOLDERS; do
    # Remove the / in the end
    sub_folder="${sub_folder%/}"
    [[ "$sub_folder" == "common" || "$sub_folder" == "tools" ]] && continue

    if [[ -e "${sub_folder}/${test_file_type}" ]]; then
      if [[ -z "$TEST_FILES" ]]; then
        TEST_FILES="${sub_folder}/${test_file_type}"
      else
        TEST_FILES="${TEST_FILES},${sub_folder}/${test_file_type}"
      fi
    elif [[ -e "${sub_folder}/tests" ]]; then
      if [[ -z "$TEST_FILES" ]]; then
        TEST_FILES="${sub_folder}/tests"
      else
        TEST_FILES="${TEST_FILES},${sub_folder}/tests"
      fi
    else
      append_log "WARNING: No $test_file_type or tests file under $sub_folder folder." "$LOGFILE"
    fi
  done
}

test_all() {
  local test_file_type=$1

  # Don't quote */, otherwise it could not list all folders.
  SUB_FOLDERS=$(ls -1 -d -- */)

  prepare_files_list "$test_file_type"
  CMDFILES="$TEST_FILES"
  append_log "Test files: $CMDFILES" "$LOGFILE"
}

# Default value
: "${LOGFILE:="./lkvs.log"}"
: CMDFILES=""
: CMDLINE=""

while getopts ":o:d:f:c:h" opt; do
  case "$opt" in
    o)
      LOGFILE=$OPTARG
      ;;
    d)
      CMDFILES=$OPTARG
      [[ "$CMDFILES" == "$TESTS_CLIENT" ]] && test_all "$TESTS_CLIENT"
      [[ "$CMDFILES" == "$TESTS_SERVER" ]] && test_all "$TESTS_SERVER"
      #check_dep_for_tests "$TEST_FILES"
      exit 0
      ;;
    f)
      CMDFILES=$OPTARG
      [[ "$CMDFILES" == "$TESTS_CLIENT" ]] && test_all "$TESTS_CLIENT"
      [[ "$CMDFILES" == "$TESTS_SERVER" ]] && test_all "$TESTS_SERVER"
      ;;
    c)
      CMDLINE=$OPTARG
      ;;
    h)
      usage
      exit 0
      ;;
    \?)
      usage
      err "Invalid option: -$OPTARG"
      ;;
    :)
      usage
      err "Option -$OPTARG requires an argument."
      ;;
  esac
done

if [[ -z "$CMDFILES" ]] && [[ -z "$CMDLINE" ]]; then
  usage
  err "no test to run!"
fi

cat /dev/null > "$LOGFILE"

START_TIME="$(date +%Y-%m-%d_%H-%M-%S)"
SUMMRY_LOG="/tmp/lkvs_${START_TIME}_summary.log"
echo "Test Start Time: $START_TIME" > "$SUMMRY_LOG"
{
  echo "--------------------------------------------------------"
  printf "%-76s%-11s%-12s%-8s\n" "Testcase" "Result" "Exit Value" "Duration"
  printf "%-76s%-11s%-12s%-8s\n" "--------" "------" "----------" "--------"
} >> "$SUMMRY_LOG"

for cmdfile in $(tr "," " " <<< "$CMDFILES"); do
  if [[ ! -f "$cmdfile" ]]; then
    append_log "WARNING: $cmdfile not found!" "$LOGFILE"
    continue
  fi

  [[ $(which file) ]] && {
    file_type=""
    file_type=$(file "$cmdfile")
    [[ "$file_type" == *"text"* ]] || {
      append_log "WARNING: -f $cmdfile is not a text type, it's real type:|$file_type|" "$LOGFILE"
      append_log "Please choose the correct tests file." "$LOGFILE"
      usage
      continue
    }
  }

  runcmdfile "$cmdfile" "$LOGFILE"
done

if [[ -n "$CMDLINE" ]]; then
  runtest "$CMDLINE" "$LOGFILE"
fi

# Add the following print for the end of the case summary.
echo "--------------------------------------------------------" >> "$SUMMRY_LOG"

[[ -z "$LOGFILE" ]] || cat "$SUMMRY_LOG" >> "$LOGFILE"
cat "$SUMMRY_LOG"
